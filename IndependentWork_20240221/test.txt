1.	Что такое функция и как ее объявить?
функция -это кусок программы, вызываемая по имени из другого места программы и выполняющая какую-то работу.
а)Объявляется: def <имя_функции>():
б)Может иметь параметры позиционные и/или именованные параметры, которые могут быть
  формальными(имеют значение по умолчанию) и фактическими (не имеют значение по умолчанию)
в)Может передавать результат работы (return или yield).
  return - выход с выводом значения
  yield -передает значение без уничтожения локальных переменных

2.	Как создать функцию?
  def <имя_функции>(*<позиционые параметры>,**<именованные параметры>):
или
  def <имя_функции>():

3.	Как показать что созданная функция возвращает результат?
Для этого используется аннотация:
см. -> <тип возвращаемого результата>
  def <имя_функции>(*<позиционые параметры>,**<именованные параметры>) -> <тип возвращаемого результата>:
например:
  dey my_func(my_param:str) -> list[int,str]:

4.	В чем разница между параметрами и аргументами функции?
Параметры - это значения получаемые функцией.
например:
  def <имя_функции>(*<позиционые параметры>,**<именованные параметры>):

Аргументы -это значения передаваемые при вызове функции.
например:
 <имя_функции>(*<позиционые аргументы>,**<именованные аргументы>)

5.	Как рекурсивные функции работают в Python?
Рекурсивная функция в своем коде вызывает саму себя. Главное должно быть условие останавливающее вызов этой функции
иначе программа достигнув максимальный уровень рекурсии (обычно 1000) выдаст сообщение
о достижении максимального уровня рекурсии.

можно увеличить уровень рекурсии:
например до 3000
 import sys
 sys.setrecursionlimit(3000)

6.	Что такое декораторы функций и как они используются? ( привести свой пример декоратора)
 Декоратор — это объект, который расширяет возможности функции, не меняя её исходный код.
 @ - признак декоратора.
 Часто в качестве декораторов используются функции. Может быть класс.

 например:
 def my_new_func(func):
    def rezalt():
        return 'Привет, ' + func() + '. Пока'
    return rezalt

 @my_new_func
 def my_func(string):
    return string

 print(my_func('Рая'))

 т.е. можно представить декоратор как :

 my_decorator = my_new_func(my_func)
 print(my_decorator('Рая'))

7.	Как расшифровывается ООП?
object-oriented programming или объектно-ориентированное программирование


8.	Что относится к основным принципам(парадигмам) ООП?

а) инкапсуляция - ограничение доступа к методам и свойствам класса, чтобы шалавливые ручки не испортили механизм работы,
 предоставляя способы взаимодействия.
б) полиморфизм - разное поведение одного и того же метода в дочерних классах(переопределение метода в каждом классе или родительском классе).
   Т.е если есть список объектов, можно использовать метод под таким именем, обрабатывая список.
в) наследование - дочерний класс наследует методы и свойства родительского класса.
   Все является объектами и наследуется от родительского класса object
г)абстракция - это решение конкретных задач не отвлекаясь на ненужные детали, т.е. срыть не нужные детали

9.	Что будет результатом программы и почему?
class Test():
    test=None

print(Test.test)

результат : None
Обращаемся к свойству test класса Test без образования объекта класса.
Значение свойства - None, результат None

10.	Какой принцип ООП описывает следующее предложение?
    Этот принцип является способностью использовать общий интерфейс для нескольких форм (типов данных).

    полиморфизм

11.	Какой из перечисленных вариантов является верным объявлением private поля?
•	private field = 0
•	field = 0
•	_field = 0
•	__field = 0

__field = 0
Используется для работы внутри класса.

12.	Как создать конструктор класса?
Конструктором класса называется метод (__init__), используемый при иницализации объектов класса

def __init__(self, *args, **kwargs):

13.	Как много конструкторов в классе может иметь Python?
__init__  может быть несколько, но сработает последний

14.	Что будет результатом данной программы
class Test():
    def print_text(self):
        print('Это родительский класс')

class Test2(Test):
    def print_text(self):
        print('Это класс потомок Test2')

test=Test2()
test.print_text()

объяснение:
#создали объект класса Test2
test=Test2()

#вызвали метод объекта. Т.к. с этим именем метод определен в классе Test2, то выполниться метод из этого класса
# тюею результатом будет:
'Это класс потомок Test2'

15.15.	Какой параметр обязательно принимает в себя метод экземпляра?
•	тип объекта
•	сам экземпляр класса
•	название класса
•	таких аргументов нет

сам экземпляр класса
параметр -  self


16.	Как использовать инкапсуляцию для защиты данных в классах?
свойства класса могут быть:
а) public   Нет никакой защиты
б)protected  (впереди имени ставиться 1 подчеркивание)
             Служат для обращения внутри класса и во всех дочерних.
             Работать можно через set и get. А так же напрямую (это будет на совести программиста) ошибки не выдает.
d)private  (впереди имени ставиться 2 подчеркивание)
             Служат для обращения внутри класса.
             Работать можно через set и get. Иначе выдает ошибку AttributeError

17.	Какая разница между абстрактными классами и интерфейсами в Python?

Интерфейс определяет только написание методов(абстрактных), но не содержит реализации
    используется для определения общего поведения группы классов(у них должны быть обязательно абстрактные методы
    интерфейса), возможно, не связанных между собой

Абстрактный класс может иметь как абстрактные методы без реализации, так и методы с реализацией
    используется для создания общей функциональности для группы связанных классов

18.	Как показать в классе что метод является абстрактым?
@abstractmethod

например:
from abc import ABC
class <имя класса>(ABC):
    @abstractmethod
    def <имя метода>():

19.	Что будет результатом программы?
class Test():
    __test=0

print(Test.__test)

результат: AttributeError
private атрибутам можно обращаться только через set и get

20.Что делает финализатор класса?
Финализатором класса является метод __del__
Срабатывает перед удалением объекта класса и при завершении программы

21.	Распишите работу магических методов: new, call
__new__
срабатывает перед созданием объекта класса
т.е. если нужно определить правильно ли заданы атрибуты вновь создаваемого объекта
или нужно вообще создавать этот объект класса. Если нам нужно возвращаем __new__ родительского класса:
return super().__new__(cls,*args,**kwargs)

__сall__
срабатывает при вызове объекта класса:  <имяобъектакласса>()
Пример использования: Функтор(объект класса, который имеет метод __call__) могет использоваться как счетчик.
И каждый объект этого класса имеет свой отсчет


22.	Если в классе определены два метода с одинаковыми именами и разными списками параметров, что будет результатом?
сработает последний метод. И если список параметров (формальных и фактических) соответствует аргументам вызываемого метода,
то выполнение этого метода. Если нет, то ошибка

23.	Значением поля класса по умолчанию может являться?
•	значение переменной
•	константа
•	результат вызова функции
•	возможность указания значений полей по умолчанию в Python не предусмотрена

Первые 3 пункта:
•	значение переменной
•	константа
•	результат вызова функции


24.	Укажите результат выполнения скрипта и почему:
class Foo:
    count= x

    def __init__(self):
        self.count+=1

    def __del__(self):
        self.count+=1
obj=Foo()
print(obj.count)

результат: NameError   т.к. x не определено

25.	Как указать в программе что класс A наследуется от B?
class A(B):

26.	Что такое API и для чего оно используется?
API (программный интерфейс приложения) — это набор способов и правил, по которым приложение работает с данныими
и дает ответ. А так же обращается с другими API.

27.	Какие преимущества предоставляют API?
инкапсуляция.
Мы не знаем как устроено внутри, не знаем какие программы и их версии используется.
Но знаем правила, применяя которые можно получить необходимую информацию

28.	Расскажите о различных типах HTTP-запросов.
Запросы (HTTP Requests) — сообщения, которые отправляем на сервер, чтобы вызвать выполнение некоторых действий.
                          Зачастую для получения доступа к определенному ресурсу. ...
Ответы (HTTP Responses) — сообщения, которые сервер отправляет в ответ на запрос.

29.	Какие основные методы HTTP используются в RESTful API?
Принцип работы RESTful API совпадает с принципом работы в Интернете
а) связываемся с сервером API и получаем документацию по работе с данным ресурсом.
б)формируем запрос согласно требованиям, чтобы понимал ресурс что хотим.
в)Сервер определяет клиента и имеет ли право сделать запрос.
    Аутентификация — это подтверждения личности.
    Может быть : базовым (имя пользователя и пароль)
               и аутентификация носителя(предоставления доступа по токену)

г)Сервер получает запрос и обрабатывает его
д)Сервер возвращает ответ:  был ли запрос успешным и сведения, запрошенные клиентом(при успешном запросе).

30.	Что такое запросы GET, POST, PUT и DELETE? Как они используются в API?
get - обычный запрос(получение данных)
post - запрос для приема данных(добавление, изменение данных)
put - запрос для регулярного обновления. вложеные в него объекты сохраняются на определеном url
    (если был url - перезаписывает, нет - создает)
patch - изменение информации на сервере(т.е. обновление инфо)
delete - удаляет объект
head - аналогичен get (но без тела ответа)

31.	Что такое заголовки HTTP? Какие заголовки часто используются в API?
заголовок запроса — характеризуют тело сообщения, параметры передачи и
прочие сведения(пользователя, даты, кодировка, язык, content-type и т.д.)
Заголовки можно разделить на два основных типа: заголовки запросов и заголовки ответов
Заголовки запросов предоставляют важную контекстную информацию о клиенте и его требованиях к серверу.
Заголовки ответов передают информацию о сервере, возможных ошибках, статус сообщения и результат ответа

Все заголовки разделяются на четыре основных группы:
Общие заголовки — используются в запросах и ответах.
Заголовки запроса(Request) — используются только в запросах.
Заголовки ответа(Response) — используются только в ответах.
Заголовки сущности — сопровождают каждую сущность сообщения. Используются в запросах и ответах.



